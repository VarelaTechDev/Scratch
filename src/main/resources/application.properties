server.port=8080

jwt.secret=636a20ce5773dbc9ec07cc47a2b1aa2b533a1013241070a364ef4eb862412587
jwt.expiration=3600000

# DataSource configuration
spring.datasource.url=jdbc:mysql://localhost:3306/backend?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=cats
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate properties
spring.jpa.show-sql=true


# 'update' - Hibernate will update the database schema to reflect the entities and their mappings. It will create new tables, columns, and relationships, but it won't remove any existing ones.
spring.jpa.hibernate.ddl-auto=update

# 'none' - No action will be performed on the database schema.
#spring.jpa.hibernate.ddl-auto=none
# 'validate' - Hibernate will validate that the tables and columns exist in the database, matching the entities and their mappings. If the schema doesn't match, it will throw an exception.
#spring.jpa.hibernate.ddl-auto=validate
# 'update' - Hibernate will update the database schema to reflect the entities and their mappings. It will create new tables, columns, and relationships, but it won't remove any existing ones.
#spring.jpa.hibernate.ddl-auto=update
# 'create' - Hibernate will create the database schema, destroying any previous data. It's useful for testing, but not recommended for production.
#spring.jpa.hibernate.ddl-auto=create
# 'create-drop' - Hibernate will create the database schema and then drop it when the SessionFactory is closed. Like 'create', it's useful for testing, but not recommended for production.
#spring.jpa.hibernate.ddl-auto=create-drop

spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.properties.hibernate.format_sql=true

app.relying-party-id=localhost
app.relying-party-name=Example Application
app.relying-party-origins=http://localhost:3000,https://localhost:3000